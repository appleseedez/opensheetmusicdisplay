import { SourceStaffEntry } from "../VoiceData/SourceStaffEntry";
import { Fraction } from "../../Common/DataObjects/fraction";
import { VerticalGraphicalStaffEntryContainer } from "./VerticalGraphicalStaffEntryContainer";
import { Note } from "../VoiceData/Note";
import { Slur } from "../VoiceData/Expressions/ContinuousExpressions/Slur";
import { Voice } from "../VoiceData/Voice";
import { VoiceEntry } from "../VoiceData/VoiceEntry";
import { GraphicalTie } from "./GraphicalTie";
import { GraphicalObject } from "./GraphicalObject";
import { StaffMeasure } from "./StaffMeasure";
import { GraphicalNote } from "./GraphicalNote";
import { GraphicalChordSymbolContainer } from "./GraphicalChordSymbolContainer";
import { GraphicalLyricEntry } from "./GraphicalLyricEntry";
import { AbstractGraphicalInstruction } from "./AbstractGraphicalInstruction";
import { GraphicalStaffEntryLink } from "./GraphicalStaffEntryLink";
export declare abstract class GraphicalStaffEntry extends GraphicalObject {
    constructor(parentMeasure: StaffMeasure, sourceStaffEntry?: SourceStaffEntry, staffEntryParent?: GraphicalStaffEntry);
    graphicalChordContainer: GraphicalChordSymbolContainer;
    graphicalLink: GraphicalStaffEntryLink;
    relInMeasureTimestamp: Fraction;
    sourceStaffEntry: SourceStaffEntry;
    parentMeasure: StaffMeasure;
    notes: GraphicalNote[][];
    graceStaffEntriesBefore: GraphicalStaffEntry[];
    graceStaffEntriesAfter: GraphicalStaffEntry[];
    staffEntryParent: GraphicalStaffEntry;
    parentVerticalContainer: VerticalGraphicalStaffEntryContainer;
    private graphicalInstructions;
    private graphicalTies;
    private lyricsEntries;
    GraphicalInstructions: AbstractGraphicalInstruction[];
    GraphicalTies: GraphicalTie[];
    LyricsEntries: GraphicalLyricEntry[];
    getAbsoluteTimestamp(): Fraction;
    findEndTieGraphicalNoteFromNote(tieNote: Note): GraphicalNote;
    findEndTieGraphicalNoteFromNoteWithStartingSlur(tieNote: Note, slur: Slur): GraphicalNote;
    findEndTieGraphicalNoteFromNoteWithEndingSlur(tieNote: Note): GraphicalNote;
    findGraphicalNoteFromGraceNote(graceNote: Note): GraphicalNote;
    findGraphicalNoteFromNote(baseNote: Note): GraphicalNote;
    getGraphicalNoteDurationFromVoice(voice: Voice): Fraction;
    findLinkedNotes(notLinkedNotes: GraphicalNote[]): void;
    findVoiceEntryGraphicalNotes(voiceEntry: VoiceEntry): GraphicalNote[];
    isVoiceEntryPartOfLinkedVoiceEntry(voiceEntry: VoiceEntry): boolean;
    getMainVoice(): Voice;
    findStaffEntryMinNoteLength(): Fraction;
    findStaffEntryMaxNoteLength(): Fraction;
    findOrCreateGraphicalNotesListFromVoiceEntry(voiceEntry: VoiceEntry): GraphicalNote[];
    findOrCreateGraphicalNotesListFromGraphicalNote(graphicalNote: GraphicalNote): GraphicalNote[];
    addGraphicalNoteToListAtCorrectYPosition(graphicalNotes: GraphicalNote[], graphicalNote: GraphicalNote): void;
}
