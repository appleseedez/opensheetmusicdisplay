import { MusicPartManager } from "./MusicPartManager";
import { Fraction } from "../../Common/DataObjects/fraction";
import { Repetition } from "../MusicSource/Repetition";
import { DynamicsContainer } from "../VoiceData/HelperObjects/DynamicsContainer";
import { SourceMeasure } from "../VoiceData/SourceMeasure";
import { VoiceEntry } from "../VoiceData/VoiceEntry";
import { Instrument } from "../Instrument";
import { MultiTempoExpression } from "../VoiceData/Expressions/multiTempoExpression";
import { AbstractExpression } from "../VoiceData/Expressions/abstractExpression";
export declare class MusicPartManagerIterator {
    constructor(manager: MusicPartManager, startTimestamp?: Fraction, endTimestamp?: Fraction);
    backJumpOccurred: boolean;
    forwardJumpOccurred: boolean;
    private manager;
    private currentMappingPart;
    private currentMeasure;
    private currentMeasureIndex;
    private currentPartIndex;
    private currentVoiceEntryIndex;
    private currentDynamicEntryIndex;
    private currentTempoEntryIndex;
    private currentVoiceEntries;
    private currentDynamicChangingExpressions;
    private currentTempoChangingExpression;
    private repetitionIterationCountDictKeys;
    private repetitionIterationCountDictValues;
    private currentRepetition;
    private endReached;
    private frontReached;
    private currentTimeStamp;
    private currentEnrolledMeasureTimestamp;
    private currentVerticalContainerInMeasureTimestamp;
    private jumpResponsibleRepetition;
    private activeDynamicExpressions;
    private activeTempoExpression;
    EndReached: boolean;
    FrontReached: boolean;
    CurrentMeasure: SourceMeasure;
    CurrentRepetition: Repetition;
    CurrentRepetitionIteration: number;
    CurrentJumpResponsibleRepetitionIterationBeforeJump: number;
    CurrentVoiceEntries: VoiceEntry[];
    CurrentMeasureIndex: number;
    CurrentEnrolledTimestamp: Fraction;
    CurrentSourceTimestamp: Fraction;
    JumpOccurred: boolean;
    ActiveTempoExpression: MultiTempoExpression;
    ActiveDynamicExpressions: AbstractExpression[];
    CurrentTempoChangingExpression: MultiTempoExpression;
    JumpResponsibleRepetition: Repetition;
    clone(): MusicPartManagerIterator;
    CurrentVisibleVoiceEntries(instrument?: Instrument): VoiceEntry[];
    CurrentAudibleVoiceEntries(instrument?: Instrument): VoiceEntry[];
    getCurrentDynamicChangingExpressions(): DynamicsContainer[];
    CurrentScoreFollowingVoiceEntries(instrument?: Instrument): VoiceEntry[];
    moveToNext(): void;
    moveToNextVisibleVoiceEntry(notesOnly: boolean): void;
    private resetRepetitionIterationCount(repetition);
    private incrementRepetitionIterationCount(repetition);
    private setRepetitionIterationCount(repetition, iterationCount);
    private getRepetitionIterationCount(rep);
    private handleRepetitionsAtMeasureBegin();
    private handleRepetitionsAtMeasureEnd();
    private doBackJump(currentRepetition);
    private activateCurrentRhythmInstructions();
    private activateCurrentDynamicOrTempoInstructions();
    private recursiveMove();
    private checkEntries(notesOnly);
    private getVisibleEntries(entry, visibleEntries);
    private getAudibleEntries(entry, audibleEntries);
    private getScoreFollowingEntries(entry, followingEntries);
    private getVoiceEntries(container);
}
