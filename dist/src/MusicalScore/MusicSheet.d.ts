import { Fraction } from "../Common/DataObjects/fraction";
import { MusicPartManager } from "./MusicParts/MusicPartManager";
import { SourceMeasure } from "./VoiceData/SourceMeasure";
import { Repetition } from "./MusicSource/Repetition";
import { DynamicsContainer } from "./VoiceData/HelperObjects/DynamicsContainer";
import { InstrumentalGroup } from "./InstrumentalGroup";
import { Instrument } from "./Instrument";
import { Label } from "./Label";
import { Staff } from "./VoiceData/Staff";
import { MusicSheetErrors } from "../Common/DataObjects/MusicSheetErrors";
import { MultiTempoExpression } from "./VoiceData/Expressions/multiTempoExpression";
import { EngravingRules } from "./Graphical/EngravingRules";
export declare class PlaybackSettings {
    rhythm: Fraction;
}
export declare class MusicSheet {
    constructor();
    static defaultTitle: string;
    userStartTempoInBPM: number;
    pageWidth: number;
    rules: EngravingRules;
    private idString;
    private sourceMeasures;
    private repetitions;
    private dynListStaves;
    private timestampSortedDynamicExpressionsList;
    private timestampSortedTempoExpressionsList;
    private instrumentalGroups;
    private instruments;
    private playbackSettings;
    private path;
    private title;
    private subtitle;
    private composer;
    private lyricist;
    private musicPartManager;
    private musicSheetErrors;
    private staves;
    private selectionStart;
    private selectionEnd;
    private transpose;
    private defaultStartTempoInBpm;
    private drawErroneousMeasures;
    private hasBeenOpenedForTheFirstTime;
    private currentEnrolledPosition;
    private engravingRules;
    static getIndexFromStaff(staff: Staff): number;
    SourceMeasures: SourceMeasure[];
    Repetitions: Repetition[];
    readonly DynListStaves: DynamicsContainer[][];
    readonly TimestampSortedTempoExpressionsList: MultiTempoExpression[];
    readonly TimestampSortedDynamicExpressionsList: DynamicsContainer[];
    readonly InstrumentalGroups: InstrumentalGroup[];
    readonly Instruments: Instrument[];
    SheetPlaybackSetting: PlaybackSettings;
    DrawErroneousMeasures: boolean;
    HasBeenOpenedForTheFirstTime: boolean;
    InitializeStartTempoInBPM(startTempo: number): void;
    DefaultStartTempoInBpm: number;
    Path: string;
    readonly Staves: Staff[];
    readonly TitleString: string;
    readonly SubtitleString: string;
    readonly ComposerString: string;
    readonly LyricistString: string;
    Title: Label;
    Subtitle: Label;
    Composer: Label;
    Lyricist: Label;
    Rules: EngravingRules;
    readonly SheetErrors: MusicSheetErrors;
    SelectionStart: Fraction;
    SelectionEnd: Fraction;
    addMeasure(measure: SourceMeasure): void;
    checkForInstrumentWithNoVoice(): void;
    getStaffFromIndex(staffIndexInMusicSheet: number): Staff;
    fillStaffList(): void;
    MusicPartManager: MusicPartManager;
    getCompleteNumberOfStaves(): number;
    getListOfMeasuresFromIndeces(start: number, end: number): SourceMeasure[];
    getNextSourceMeasure(measure: SourceMeasure): SourceMeasure;
    getFirstSourceMeasure(): SourceMeasure;
    getLastSourceMeasure(): SourceMeasure;
    resetAllNoteStates(): void;
    getMusicSheetInstrumentIndex(instrument: Instrument): number;
    getGlobalStaffIndexOfFirstStaff(instrument: Instrument): number;
    setRepetitionNewUserNumberOfRepetitions(index: number, value: number): void;
    getRepetitionByIndex(index: number): Repetition;
    CompareTo(other: MusicSheet): number;
    readonly Errors: {
        [n: number]: string[];
    };
    readonly FirstMeasureNumber: number;
    readonly LastMeasureNumber: number;
    CurrentEnrolledPosition: Fraction;
    Transpose: number;
    readonly FullNameString: string;
    IdString: string;
    getEnrolledSelectionStartTimeStampWorkaround(): Fraction;
    readonly SheetEndTimestamp: Fraction;
    getSourceMeasureFromTimeStamp(timeStamp: Fraction): SourceMeasure;
    findSourceMeasureFromTimeStamp(timestamp: Fraction): SourceMeasure;
    getVisibleInstruments(): Instrument[];
}
