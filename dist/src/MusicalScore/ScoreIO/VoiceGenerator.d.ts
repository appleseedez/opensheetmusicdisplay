import { Instrument } from "../Instrument";
import { Voice } from "../VoiceData/Voice";
import { Note } from "../VoiceData/Note";
import { SourceMeasure } from "../VoiceData/SourceMeasure";
import { SourceStaffEntry } from "../VoiceData/SourceStaffEntry";
import { Fraction } from "../../Common/DataObjects/fraction";
import { IXmlElement } from "../../Common/FileIO/Xml";
import { Staff } from "../VoiceData/Staff";
export declare type SlurReader = any;
export declare class VoiceGenerator {
    constructor(instrument: Instrument, voiceId: number, slurReader: SlurReader, mainVoice?: Voice);
    private slurReader;
    private musicSheet;
    private voice;
    private currentVoiceEntry;
    private currentNote;
    private currentMeasure;
    private currentStaffEntry;
    private lastBeamTag;
    private openBeam;
    private openGraceBeam;
    private openTieDict;
    private currentOctaveShift;
    private tupletDict;
    private openTupletNumber;
    GetVoice: Voice;
    OctaveShift: number;
    createVoiceEntry(musicTimestamp: Fraction, parentStaffEntry: SourceStaffEntry, addToVoice: boolean): void;
    read(noteNode: IXmlElement, noteDuration: number, divisions: number, restNote: boolean, graceNote: boolean, parentStaffEntry: SourceStaffEntry, parentMeasure: SourceMeasure, measureStartAbsoluteTimestamp: Fraction, maxTieNoteFraction: Fraction, chord: boolean, guitarPro: boolean): Note;
    checkForOpenGraceNotes(): void;
    checkForStaffEntryLink(index: number, currentStaff: Staff, currentStaffEntry: SourceStaffEntry, currentMeasure: SourceMeasure): SourceStaffEntry;
    checkForOpenBeam(): void;
    checkOpenTies(): void;
    hasVoiceEntry(): boolean;
    getNoteDurationFromType(type: string): Fraction;
    private addSingleNote(node, noteDuration, divisions, graceNote, chord, guitarPro);
    private addRestNote(noteDuration, divisions);
    private createBeam(node, note, grace);
    private handleOpenBeam();
    private handleGraceNote(node, note);
    private addTuplet(node, tupletNodeList);
    private handleTimeModificationNode(noteNode);
    private addTie(tieNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction);
    private getNextAvailableNumberForTie();
    private findCurrentNoteInTieDict(candidateNote);
    private getTupletNoteDurationFromType(xmlNode);
}
